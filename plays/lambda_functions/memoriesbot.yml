- name: deploy memoriesbot to aws lambda
  hosts: local
  gather_facts: no

  vars:
    project_name: "{{ general_project_name }}-io"
    service_name: "{{ memoriesbot_project_name }}"
    service_url: "{{ bot_service_url }}"

    repo_name: "{{ service_name }}"
    repo_url: "{{ github_account }}/{{ repo_name }}.git"
    bin_file: "{{ work_dir }}/build/{{ service_name }}.zip"

    user: "{{ runtime_user }}"
    deployment_env: prod

    upload_root_dir: "{{ work_dir }}/build"

    aws_s3_bucket_name: "{{ lambda_domain }}"
    aws_lambda_runtime: go1.x
    aws_lambda_environment_variables: GO_ENV={{ deployment_env }},VERSION={{ deployment_version }}

  roles:
    - role: utils/empty_work_dir

    - role: git/get_source_code

    - role: utils/generate_from_template
      template_file: "{{ files_dir }}/{{ service_name }}/config.go.j2"
      destination_file: "{{ work_dir }}/pkg/config/config.go"

    - role: golang/build_go_package
      make_zip: yes

    - role: aws/put_object_to_s3_bucket
      files:
        - "{{ service_name }}.zip"

    - role: aws/execute_cloudformation_stack
      aws_stack_name: "{{ service_name }}-stack"
      aws_stack_file_path: "{{ files_dir }}/cloudformation/{{ service_name }}.yml"
      aws_stack_parameters: |
          ParameterKey=ProjectName,ParameterValue={{ project_name }}
          ParameterKey=ServiceName,ParameterValue={{ service_name }}
          ParameterKey=LambdaFunctionsBucket,ParameterValue={{ lambda_domain }}
          ParameterKey=VersionName,ParameterValue={{ deployment_env }}
          ParameterKey=DeploymentVersion,ParameterValue={{ deployment_version }}
      aws_stack_capabilities: CAPABILITY_NAMED_IAM

    - role: aws/deploy_lambda_function
      s3_key: "{{ service_name }}.zip"

    - role: utils/empty_work_dir

    - role: utils/notify_knightwatcher
      message_username: "{{ user }}"
      message_type: deploy
      message_link: "{{ service_url }}"
      message_repo_name: "{{ repo_name }}"
