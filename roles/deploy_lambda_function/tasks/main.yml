- name: get source code
  git:
    repo: "{{ repo_url }}"
    dest: "{{ work_dir }}"
    force: yes
    version: "{{ repo_version }}"

- name: install npm dependencies for build
  command: npm install
  args:
    chdir: "{{ work_dir }}"

- name: get lambda function
  command: aws lambda get-function
    --profile {{ aws_profile }}
    --function-name {{ aws_lambda_function_name }}
    --region {{ aws_region }}
  register: get_function_result
  failed_when: "get_function_result.stderr and
    'ResourceNotFoundException' not in get_function_result.stderr"

- name: create lambda function
  command: node_modules/.bin/claudia create
    --name {{ aws_lambda_function_name }}
    --runtime {{ aws_lambda_runtime }}
    --role {{ aws_lambda_role_name }}
    --region {{ aws_region }}
    --api-module {{ aws_lambda_module }}
    --config {{ aws_lambda_config_json }}
    --version {{ aws_lambda_version }}
    --timeout {{ aws_lambda_timeout }}
    --memory {{ aws_lambda_memory }}
    --security-group-ids {{ aws_lambda_sg_ids }}
    --subnet-ids {{ aws_lambda_subnet_ids }}
    --set-env AWS_PROFILE={{ aws_profile }}
  args:
    chdir: "{{ work_dir }}"
  when: "get_function_result.stderr and 'ResourceNotFoundException' in get_function_result.stderr"

- name: update lambda function code
  command: node_modules/.bin/claudia update
    --config {{ aws_lambda_config_json }}
    --version {{ aws_lambda_version }}
    --set-env AWS_PROFILE={{ aws_region }}
  args:
    chdir: "{{ work_dir }}"
  register: lambda_update
  when: get_function_result.stdout

- name: get lambda function
  command: aws lambda get-function
    --profile {{ aws_region }}
    --function-name "{{ aws_lambda_function_name }}"
  register: get_new_function_result
  failed_when: "get_function_result.stderr and
    'ResourceNotFoundException' not in get_function_result.stderr"

- set_fact:
    aws_lambda_arn="{{ (get_new_function_result.stdout | from_json).Configuration.FunctionArn }}"

- name: tag lambda function
  command: aws lambda tag-resource
    --resource "{{ aws_lambda_arn }}"
    --region "{{ aws_region }}"
    --tags Service="{{ service_name }}",Name="{{ user }}",DeploymentMethod="{{ deployment_method }}"
    --profile {{ aws_region }}
