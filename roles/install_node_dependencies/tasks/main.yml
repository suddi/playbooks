# - name: test nvm command
#   shell: nvm
#     --version
#   register: nvm_version_result
#   failed_when: "nvm_version_result.stderr and
#     'command not found' not in nvm_version_result.stderr"

# - name: download nvm_install.sh
#   get_url:
#     dest: "{{ nvm_install_sh_path }}"
#     force: no
#     url: "{{ install_nvm_url }}"
#   when: "nvm_version_result.stderr and
#     'command not found' in nvm_version_result.stderr"

# - name: install nvm
#   shell: source {{ nvm_install_sh_path }}
#   when: "nvm_version_result.stderr and
#     'command not found' in nvm_version_result.stderr"

# - name: add nvm initialization to {{ shell_profile_file }}
#   blockinfile:
#     path: "{{ shell_profile_file }}"
#     block: |
#       export NVM_DIR="$HOME/.nvm"
#       export NODE_VERSION="6"

#       if [ -s "$NVM_DIR/nvm.sh" ]; then
#           source "$NVM_DIR/nvm.sh"
#       fi

#       if [ -s "$NVM_DIR/bash_completion" ]; then
#           source "$NVM_DIR/bash_completion"
#       fi

#       if [ "$(nvm alias default)" != $NODE_VERSION ]; then
#           nvm alias default $NODE_VERSION > /dev/null
#           nvm use $NODE_VERSION > /dev/null
#       fi

- name: nvm install node
  shell: source {{ nvm_sh_path }} && nvm install {{ item }}
  with_items: "{{ node_versions }}"
  register: nvm_install_result
  failed_when: "nvm_install_result.stderr and
    'nvm install N/A' not in nvm_install_result.stderr"

- name: print default npm version
  include_role:
    name: print_package_version
  vars:
    package_name: npm

- name: print default node version
  include_role:
    name: print_package_version
  vars:
    package_name: node
