- name: test nvm command
  shell: source {{ nvm_sh_path }}; nvm --version
  args:
    executable: /bin/bash
  register: nvm_version_result
  failed_when: "nvm_version_result.stderr and
    'command not found' not in nvm_version_result.stderr"

- name: install nvm
  git:
    repo: "{{ nvm_repo_url }}"
    dest: "{{ nvm_dir }}"
    force: yes
    version: "{{ nvm_version }}"

- name: add nvm initialization to {{ shell_profile_file }}
  blockinfile:
    path: "{{ shell_profile_file }}"
    block: "{{ code_block }}"

- name: add nvm initialization to {{ shell_rc_file }}
  blockinfile:
    path: "{{ shell_rc_file }}"
    block: "{{ code_block }}"

- name: nvm install node
  shell: source {{ nvm_sh_path }}; nvm install {{ item }}
  args:
    executable: /bin/bash
  register: nvm_install_result
  changed_when: "'is already installed.' not in nvm_install_result.stdout"
  with_items: "{{ node_versions }}"

- name: get nvm version
  shell: source {{ nvm_sh_path }}; nvm --version
  args:
    executable: /bin/bash
  register: nvm_version_result

- name: print nvm version
  debug:
    msg: "{{ nvm_version_result.stdout }}"

- name: get npm version
  shell: source {{ nvm_sh_path }}; npm --version
  args:
    executable: /bin/bash
  register: npm_version_result

- name: print npm version
  debug:
    msg: "{{ npm_version_result.stdout }}"

- name: get node version
  shell: source {{ nvm_sh_path }}; node --version
  args:
    executable: /bin/bash
  register: node_version_result

- name: print node version
  debug:
    msg: "{{ node_version_result.stdout }}"

- name: copy .npmrc to host
  copy:
    src: "{{ inventory_dir }}/roles/install_node_dependencies/files/.npmrc"
    dest: "{{ ssh_user_home_dir }}/.npmrc"
    owner: "{{ ssh_user }}"
    mode: 0600
