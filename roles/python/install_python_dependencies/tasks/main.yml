- name: clone pyenv repo
  git:
    repo: "{{ dependency_pyenv_url }}"
    dest: "{{ dependency_pyenv_dir }}"
    force: yes
    update: yes
    version: "{{ dependency_pyenv_version }}"
  when: ansible_facts["os_family"] != "Darwin"

- name: add .pyenvrc to {{ user_home_dir }}/.pyenvrc
  template:
    src: pyenvrc.j2
    dest: "{{ user_home_dir }}/.pyenvrc"
    mode: "0644"

- name: add .pyenvrc initialization into {{ user_shell_rc_file }}
  lineinfile:
    dest: "{{ user_shell_rc_file }}"
    create: yes
    regexp: "^. $HOME/.pyenvrc$"
    state: present
    line: . "$HOME/.pyenvrc"
  when: add_rc_initialization is defined and add_rc_initialization

- name: pyenv install python
  command: pyenv install --skip-existing {{ item }}
  register: pyenv_install_result
  with_items: "{{ python_versions }}"

- name: pyenv install virtualenvwrapper
  shell: . $HOME/.pyenvrc && pyenv virtualenvwrapper

- name: update pip
  shell: . $HOME/.pyenvrc && pyenv shell {{ item }} && pip install
    --upgrade pip
  with_items: "{{ python_versions }}"

- name: switch to default python
  shell: . $HOME/.pyenvrc && pyenv shell {{ python_default_version }}
  
- name: get python version
  command: python
    --version
  register: python_version_result
  changed_when: no

- name: print python version
  debug:
    msg: "{{ python_version_result.stdout }}"

- name: get pip version
  command: pip
    --version
  register: pip_version_result
  changed_when: no

- name: print pip version
  debug:
    msg: "{{ pip_version_result.stdout }}"
